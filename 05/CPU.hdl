// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // 用or16 來命名 isC、c1、d2之類的後面比較好使用
    Or16(a=false ,b=instruction ,out[15]=isC ,out[12]=a ,out[11]=c1 ,out[10]=c2 ,out[9]=c3 ,out[8]=c4 ,out[7]=c5 ,out[6]=c6 ,out[5]=d1 , out[4]=d2 , out[3]=d3 , out[2]=j1 , out[1]=j2 , out[0]=j3);

    //從圖片左到右開始編碼 
    // 第一個 Mux16   c甲 = isC = 1 
    Mux16(a=instruction ,b=ALUoutput ,sel=isC ,out=intoA);    //  sel就是c甲

    // A register      c乙 = isA(0) 或 isC&d1(1)   = Aload
    Not(in=isC ,out=isA);        //  isC=I15  isA=!isC       進去的是A或C指令
    And(a=isC ,b=d1 ,out=isCd1);              //  whoareyou = isC & d1     
    Or(a=isA, b=isCd1, out=Aload);

    ARegister(in=intoA ,load=Aload ,out=ARout ,out[0..14]=addressM);    //  load = isA 或 (isC & d1)    addressM = ARout[0..14]

    // 第二個 Mux16   c丙  = a 
    Mux16(a=ARout ,b=inM ,sel=a ,out=AorM);


    // D register   "DR"egister R要大寫
    And(a=isC ,b=d2 ,out=Dload);
    DRegister(in=ALUoutput ,load=Dload ,out=Dout);   //   Dload = isC & d2  =  c丁  


    // ALU  
    ALU(x=Dout ,y=AorM ,zx=c1 ,nx=c2 ,zy=c3 ,ny=c4 ,f=c5 ,no=c6 ,out=ALUoutput ,out=outM ,zr=zr ,ng=ng);  // c戊 = zx、nx、zy、ny、f、no   c己 = zr、ng

    // writeM
    And(a=isC, b=d3, out=writeM);


   // JUMP 
    And(a=ng, b=j1, out=LTJump);  // out小於0
    And(a=zr, b=j2, out=EQJump);  // out等於0
    Or(a=ng, b=zr, out=ngzr);
    Not(in=ngzr, out=gt);         //都不是就是大於了
    And(a=gt, b=j3, out=GTJump);

    Or(a=LTJump, b=EQJump, out=LEJump);
    Or(a=LEJump, b=GTJump, out=jump);

    // PC 
    And(a=isC,b=jump,out=PCload);  // 是C指令 也是jump3本柱之一
    PC(in=ARout, load=PCload, reset=reset, inc=true, out[0..14]=pc);
    // 權重 : reset > load > inc  //所以不是reset不是load的話 inc+1     
    
  

}